import clamp from "./clamp";
import clone from "./clone";
import dateDiff from "./dateDiff";
import dateInRange from "./dateInRange";
import dayRange from "./dayRange";
import daysInMonths from "./daysInMonths";
import daysInYear from "./daysInYear";
import displayTime from "./displayTime";
import endOfDay from "./endOfDay";
import formatDate from "./formatDate";
import formatDateTime from "./formatDateTime";
import formatDuration from "./formatDuration";
import formatTime from "./formatTime";
import fromDays from "./fromDays";
import fromHours from "./fromHours";
import fromMinutes from "./fromMinutes";
import fromSeconds from "./fromSeconds";
import joinDateTime from "./joinDateTime";
import leapYear from "./leapYear";
import parseHourMinutePair from "./parseHourMinutePair";
import splitDateTime from "./splitDateTime";
import startOfDay from "./startOfDay";
import subtractDays from "./subtractDays";
import toDate from "./toDate";
import toDates from "./toDates";
import toDays from "./toDays";
import toHours from "./toHours";
import toISO from "./toISO";
import toMinutes from "./toMinutes";
import toSeconds from "./toSeconds";
import valid from "./valid";

export {
  clamp,
  clone,
  dateDiff,
  dateInRange,
  dayRange,
  daysInMonths,
  daysInYear,
  displayTime,
  endOfDay,
  formatDate,
  formatDateTime,
  formatDuration,
  formatTime,
  fromDays,
  fromHours,
  fromMinutes,
  fromSeconds,
  joinDateTime,
  leapYear,
  parseHourMinutePair,
  splitDateTime,
  startOfDay,
  subtractDays,
  toDate,
  toDates,
  toDays,
  toHours,
  toISO,
  toMinutes,
  toSeconds,
  valid
};
declare const _default: {
  clamp: (min: Date, max: Date) => (date: Date) => Date;
  clone: (date: Date) => Date;
  dateDiff: (a: Date, b: Date) => number;
  dateInRange: (from: Date, to: Date) => (date: Date) => boolean;
  dayRange: (date: Date) => Date[];
  daysInMonths: (
    leapYear: boolean
  ) => [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ];
  daysInYear: (year: number) => 366 | 365;
  displayTime: (
    source: [number, number, number],
    showSeconds: boolean
  ) => string;
  endOfDay: (date: Date) => Date;
  formatDate: (date: Date) => string;
  formatDateTime: (sourceDate: Date, showSeconds?: boolean) => string;
  formatDuration: (duration: number, showSeconds?: boolean) => string;
  formatTime: (date: Date, showSeconds?: boolean) => string;
  fromDays: (days: number) => number;
  fromHours: (hours: number) => number;
  fromMinutes: (minutes: number) => number;
  fromSeconds: (seconds: number) => number;
  joinDateTime: (date: string, time: string) => string;
  leapYear: (year: number) => boolean;
  parseHourMinutePair: (text?: string) => [number, number];
  splitDateTime: (dateTimeString: string) => [string, string];
  startOfDay: (date: Date) => Date;
  subtractDays: (sourceDate: Date, numberOfDays: number) => Date;
  toDate: (date: Date) => string;
  toDates: (xs: (string | number | Date)[]) => Date[];
  toDays: (milliseconds: number) => number;
  toHours: (milliseconds: number) => number;
  toISO: (x: Date) => string;
  toMinutes: (milliseconds: number) => number;
  toSeconds: (milliseconds: number) => number;
  valid: (date?: any) => boolean;
};

export default _default;
