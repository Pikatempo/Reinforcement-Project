import add from "./add";
import average from "./average";
import ceilToNearestPowerOfTwo from "./ceilToNearestPowerOfTwo";
import clamp from "./clamp";
import clampNormal from "./clampNormal";
import clampPercentage from "./clampPercentage";
import delta from "./delta";
import inRectangleRange from "./inRectangleRange";
import lerp from "./lerp";
import maximumBy from "./maximumBy";
import median from "./median";
import minMax from "./minMax";
import sameSign from "./sameSign";
import sign from "./sign";
import standardDeviation from "./standardDeviation";
import subtract from "./subtract";

export {
  add,
  average,
  ceilToNearestPowerOfTwo,
  clamp,
  clampNormal,
  clampPercentage,
  delta,
  inRectangleRange,
  lerp,
  maximumBy,
  median,
  minMax,
  sameSign,
  sign,
  standardDeviation,
  subtract
};
declare const _default: {
  add: (a: number, b: number) => number;
  average: (xs?: number[]) => number;
  ceilToNearestPowerOfTwo: (x: number) => number;
  clamp: (min: number, max: number) => (x: number) => number;
  clampNormal: (x: number) => number;
  clampPercentage: (x: number) => number;
  delta: (a: number, b: number) => number;
  inRectangleRange: (
    width: number,
    height: number
  ) => (x: number, y: number) => boolean;
  lerp: (t: number) => (a: number, b: number) => number;
  maximumBy: (f: (x: number) => number) => (xs: number[]) => number;
  median: (xs?: number[]) => number;
  minMax: ([a, b]: [number, number]) => [number, number];
  sameSign: (xs: number[]) => boolean;
  sign: (x: number) => number;
  standardDeviation: (xs: number[], origin?: number) => number;
  subtract: (a: number, b: number) => number;
};

export default _default;
