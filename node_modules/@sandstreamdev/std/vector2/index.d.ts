import add from "./add";
import convertSpace from "./convertSpace";
import cross from "./cross";
import dot from "./dot";
import length from "./length";
import mul from "./mul";
import multiply from "./multiply";
import normalize from "./normalize";
import reflect from "./reflect";
import rotate from "./rotate";
import scale from "./scale";
import sub from "./sub";
import transform from "./transform";
import translate from "./translate";

export {
  add,
  convertSpace,
  cross,
  dot,
  length,
  mul,
  multiply,
  normalize,
  reflect,
  rotate,
  scale,
  sub,
  transform,
  translate
};
declare const _default: {
  add: (
    [x1, y1]: [number, number],
    [x2, y2]: [number, number]
  ) => [number, number];
  convertSpace: (space: {
    a: number;
    c: number;
    e: number;
    b: number;
    d: number;
    f: number;
  }) => ([x, y]: [number, number]) => number[];
  cross: ([a, b]: [number, number], [c, d]: [number, number]) => number;
  dot: ([a, b]: [number, number], [c, d]: [number, number]) => number;
  length: ([x, y]: [number, number]) => number;
  mul: (
    {
      a,
      b,
      c,
      d,
      e,
      f
    }: {
      a: number;
      c: number;
      e: number;
      b: number;
      d: number;
      f: number;
    },
    [x, y]: [number, number]
  ) => number[];
  multiply: (
    m1: {
      a: number;
      c: number;
      e: number;
      b: number;
      d: number;
      f: number;
    },
    m2: {
      a: number;
      b: number;
      c: number;
      d: number;
      e: number;
      f: number;
    }
  ) => {
    a: number;
    c: number;
    e: number;
    b: number;
    d: number;
    f: number;
  };
  normalize: (vector: [number, number]) => [number, number];
  reflect: (a: [number, number], v: [number, number]) => [number, number];
  rotate: (
    angle?: number,
    cx?: number,
    cy?: number
  ) => {
    a: number;
    c: number;
    e: number;
    b: number;
    d: number;
    f: number;
  };
  scale: (
    sx?: number,
    sy?: number
  ) => {
    a: number;
    c: number;
    e: number;
    b: number;
    d: number;
    f: number;
  };
  sub: (
    [x1, y1]: [number, number],
    [x2, y2]: [number, number]
  ) => [number, number];
  transform: (
    ...matrices: {
      a: number;
      c: number;
      e: number;
      b: number;
      d: number;
      f: number;
    }[]
  ) => {
    a: number;
    c: number;
    e: number;
    b: number;
    d: number;
    f: number;
  };
  translate: (
    tx?: number,
    ty?: number
  ) => {
    a: number;
    c: number;
    e: number;
    b: number;
    d: number;
    f: number;
  };
};

export default _default;
