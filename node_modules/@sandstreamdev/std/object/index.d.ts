import any from "./any";
import apply from "./apply";
import empty from "./empty";
import entries from "./entries";
import enumerable from "./enumerable";
import equals from "./equals";
import every from "./every";
import filter from "./filter";
import find from "./find";
import findEntry from "./findEntry";
import findKey from "./findKey";
import first from "./first";
import flatMapValues from "./flatMapValues";
import fromEntries from "./fromEntries";
import groupBy from "./groupBy";
import hasKey from "./hasKey";
import length from "./length";
import map from "./map";
import mapEntries from "./mapEntries";
import mapKeys from "./mapKeys";
import mapValues from "./mapValues";
import merge from "./merge";
import none from "./none";
import some from "./some";
import sort from "./sort";

export {
  any,
  apply,
  empty,
  entries,
  enumerable,
  equals,
  every,
  filter,
  find,
  findEntry,
  findKey,
  first,
  flatMapValues,
  fromEntries,
  groupBy,
  hasKey,
  length,
  map,
  mapEntries,
  mapKeys,
  mapValues,
  merge,
  none,
  some,
  sort
};
declare const _default: {
  any: (xs?: object) => boolean;
  apply: (fs: ((...xs: any[]) => any)[]) => (...xs: any[]) => object;
  empty: {};
  entries: {
    <T>(
      o:
        | {
            [s: string]: T;
          }
        | ArrayLike<T>
    ): [string, T][];
    (o: {}): [string, any][];
  };
  enumerable: (...xs: string[]) => object;
  equals: (a: any, b: any) => boolean;
  every: (
    f: (value: any, key: string, context: object) => boolean
  ) => (xs: object) => boolean;
  filter: (
    f: (value: any, key: string, context: object) => boolean
  ) => (xs: object) => object;
  find: (
    predicate: (value: any, key: string, context: object) => boolean
  ) => (xs: object) => any;
  findEntry: (
    predicate: (value: any, key: string, context: object) => boolean
  ) => (xs: object) => any;
  findKey: (
    predicate: (value: any, key: string, context: object) => boolean
  ) => (xs: object) => any;
  first: (xs: object) => any;
  flatMapValues: (
    f: (value: any, key: string, context: object) => any
  ) => (xs: object) => any[];
  fromEntries: (entries: [string, any][]) => object;
  groupBy: (selector: (x: any) => string) => (xs: any[]) => object;
  hasKey: (key: string) => (xs?: any) => any;
  length: (xs: object) => number;
  map: (
    f: (value: any, key: string, context: object) => any
  ) => (xs: object) => object;
  mapEntries: (
    f: (value: any, key: string, context: object) => any
  ) => (xs: object) => [string, any][];
  mapKeys: (
    f: (value: any, key: string, context: object) => any
  ) => (xs: object) => object;
  mapValues: (
    f: (value: any, key: string, context: object) => any
  ) => (xs: object) => any[];
  merge: (
    a: {
      [index: string]: any;
    },
    b: object
  ) => object;
  none: (xs?: object) => boolean;
  some: (
    f: (value: any, key: string, context: object) => boolean
  ) => (xs: object) => boolean;
  sort: (f: (a: any, b: any) => number) => (xs: object) => object;
};

export default _default;
